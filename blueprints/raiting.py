import random
from typing import List
from vkbottle import Bot, GroupEventType, GroupTypes, LoopWrapper, User, VKAPIError
from vkbottle.bot import Blueprint, Message
from core.config import widget, user
from datetime import datetime
from core.DataBaseController import DataBaseController
from core.PermisionRule import PermisionRule
PREFIX="."

bp = Blueprint()

lw = LoopWrapper()

db = DataBaseController()

from core.config1 import user
user = User(user)


# –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞ –ª–∞–π–∫
@bp.on.raw_event(GroupEventType.LIKE_ADD, dataclass=GroupTypes.LikeAdd)
async def add_like(event:GroupTypes.LikeAdd):
    await db.addlike(event.object.liker_id)


# –ó–∞–±–∏—Ä–∞–µ—Ç –±–∞–ª–ª—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞ —Å–Ω—è—Ç–∏–µ –ª–∞–π–∫–∞
@bp.on.raw_event(GroupEventType.LIKE_REMOVE, dataclass=GroupTypes.LikeRemove)
async def remove_like(event:GroupTypes.LikeRemove):
    await db.removelike(event.object.liker_id)


# –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@bp.on.raw_event(GroupEventType.WALL_REPLY_NEW, dataclass=GroupTypes.WallReplyNew)
async def add_reply(event:GroupTypes.WallReplyNew):
    await db.addcomment(event.object.from_id)


# –ó–∞–±–∏—Ä–∞–µ—Ç –±–∞–ª–ª—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@bp.on.raw_event(GroupEventType.WALL_REPLY_DELETE,dataclass=GroupTypes.WallReplyDelete)
async def remove_reply(event:GroupTypes.WallReplyDelete):
    await db.removecomment(event.object.deleter_id)


async def parser_id(members:List[str]) -> List[int]:
    ''''''
    # https://vk.com/evenifulietome
    # https://vk.com/id457045924
    result=[]
    for member in members:
        if member.find("https://vk.com/") != -1: member = member.replace("https://vk.com/", "")
        if member.find("[id") != -1: member = (member.split('id')[1]).split('|')[0]
        if member.isdigit(): result.append(int(member))
        else: result.append(int((await bp.api.users.get(user_ids=member))[0].id))
    return result
        

@bp.on.message(PermisionRule(), text=f"{PREFIX}–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <members>")
async def add_score_event(message:Message):
    try:
        members = message.text.split(" ")[1:]
        members = await parser_id(members)
        await db.scores_update_event(members)
        await message.answer("–ë–∞–ª–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")

    # .–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ @id23423542 @dasfgrges https://vk.com/id2344523
    # @dfsdfge -> [id23423542|dasfgrges]


@bp.on.message(PermisionRule(), text=f"{PREFIX}–±–∞–ª–ª—ã <score> <members>")
async def add_score_members(message:Message):
    try:
        members = message.text.split(" ")[2:]
        members = await parser_id(members)
        score = int(message.text.split(" ")[1])
        await db.scores_update_members(members, score)
        await message.answer("–ë–∞–ª–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
        print(e)


@bp.on.message(PermisionRule(), text=(f"{PREFIX}—Å–Ω—è—Ç—å <score> <member>"))
async def remove_score_member(message:Message):
    member = message.text.split(" ")[2]
    member = await parser_id(member)
    score = int(message.text.split(" ")[1])
    await db.scores_update(member, -score)
    await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{member} —Å–Ω—è—Ç–æ {score} –±–∞–ª–ª–æ–≤")


# –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∂–µ—Ç –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@bp.on.message(PermisionRule(), text=f"{PREFIX}–æ–±–Ω–æ–≤–∏—Ç—å–≤–∏–¥–∂–µ—Ç")
async def update_widget(message:Message):
    await rating_update()




# @bp.on.message(text=['!–±–∞–ª–ª—ã <score> <members>'])
# async def add_scores(message:Message):
# 	try:
# 		score = int(message.text.split(' ')[1])
# 		members = message.text.split(' ')[2].split(',')
# 	except:
# 		await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
# 		return
# 	for member in members:
# 		try:
# 			if 'vk.com' in member:
# 				member = member.split('/')[-1]
# 				id = bp.api.utils.resolve_screen_name(screen_name=member)['object_id']
# 			else:
# 				id = (member.split('id')[1]).split('|')[0]
# 			# print(id)
# 			match score:
# 				case '–º': await scores_update_event(id, True)
# 				case _: await scores_update_event(id, False, score)
# 		except:
# 			await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
# 			return
# 	await message.answer('–ë–∞–ª–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã')


@lw.interval(seconds=15)
async def rating_update():
    widgetRating = {
        "title": "–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ "+datetime.now().strftime("%H:%M %d.%m.%Y"),
        "more": "v." + " " + (await db.get_version())[:(await db.get_version()).find("-")],
        "more_url": "https://vk.com/chs23",
        "head": [
            {
                "text": "–£—á–∞—Å—Ç–Ω–∏–∫",
                "align": "left"
            },
            {
                "text": "‚ù§",
                "align": "left"
            },
            {
                "text": "üí¨",
                "align": "left"
            },
            {
                "text": "üéâ",
                "align": "left"
            },
            {
                "text": "–ë–∞–ª–ª—ã",
                "align": "left"
            }
        ],
        "body": [
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(1)))[0].first_name + " " + (await bp.api.users.get(await db.top_member_count_id(1)))[0].last_name,
                    "icon_id": "id"+str(await db.top_member_count_id(1)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(1)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(1)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(1)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(1))
                }
            ],
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(2)))[0].first_name + " " + (await bp.api.users.get(await db.top_member_count_id(2)))[0].last_name,
                    "icon_id": "id"+str(await db.top_member_count_id(2)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(2)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(2)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(2)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(2))
                }
            ],
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(3)))[0].first_name + " " + (await bp.api.users.get(await db.top_member_count_id(3)))[0].last_name,
                    "icon_id": "id"+str(await db.top_member_count_id(3)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(3)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(3)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(3)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(3))
                }
            ],
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(4)))[0].first_name + " " + (await bp.api.users.get(await db.top_member_count_id(4)))[0].last_name,
                    "icon_id": "id"+str(await db.top_member_count_id(4)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(4)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(4)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(4)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(4))
                }                
            ],
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(5)))[0].first_name + " " + (await bp.api.users.get(await db.top_member_count_id(5)))[0].last_name,
                    "icon_id": "id"+str(await db.top_member_count_id(5)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(5)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(5)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(5)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(5))
                }
            ]
        ]
    }
        
    code = f"return {widgetRating};"

    await Bot(widget).api.app_widgets.update(code=code, type='table')


# –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
# –ö–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å 12 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
# lw.interval(60*29)
@lw.interval(seconds=30)
async def event_time_reminder():
    if await db.check_poll_time(datetime.now().timestamp()):
        events = await db.get_events_by_time(datetime.now().timestamp())
        for event in events:
            event_time = datetime.fromtimestamp(event["time"]).strftime('%H:%M %d.%m.%Y')
            members = event['members']
            for member in members:
                try:
                    await bp.api.messages.send(peer_id=member, message=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ {event_time}", random_id=random.randint(0, 2**64))
                except:
                    try:
                        await user.api.messages.send(user_id=member, message=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ {event_time}", random_id=random.randint(0, 2**64))
                    except:
                        pass
            await db.delete_poll(event['_id'])


# @lw.interval(seconds=10)
# async def check_time_polls():
#     time_now = int(datetime.now().timestamp())
#     new_polls = polls.find()
#     async for poll in new_polls:
#         if int(poll['time']) - time_now < 60*60*12:
# 			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
#             members=(await polls.find_one({'_id': poll['_id']}))['members']
#             for member in members:
#                 try:
#                     await bp.api.messages.send(peer_id=member, message='–î–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 12 —á–∞—Å–æ–≤', random_id=0)
#                     await asyncio.sleep(0.5)
#                 except VKAPIError as e:
#                     print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {}'.format(member))
#             # –£–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å
#             await polls.delete_one({'_id': poll['_id']})
#             print('–û–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω')


@bp.on.message(text='test <member>')
async def test(message:Message):
    member = message.text.split(' ')[1]
    print(message.text)