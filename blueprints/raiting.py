import random
from typing import List
from vkbottle import Bot, GroupEventType, GroupTypes, Keyboard, KeyboardButtonColor, LoopWrapper, Text, VKAPIError
from vkbottle.bot import Blueprint, Message
from core.config import widget, user
from datetime import datetime
from core.DataBaseController import DataBaseController
PREFIX="."


bp = Blueprint()

lw = LoopWrapper()

db = DataBaseController()


# –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞ –ª–∞–π–∫
@bp.on.raw_event(GroupEventType.LIKE_ADD, dataclass=GroupTypes.LikeAdd)
async def add_like(event:GroupTypes.LikeAdd):
    await db.addlike(event.object.liker_id)


# –ó–∞–±–∏—Ä–∞–µ—Ç –±–∞–ª–ª—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞ —Å–Ω—è—Ç–∏–µ –ª–∞–π–∫–∞
@bp.on.raw_event(GroupEventType.LIKE_REMOVE, dataclass=GroupTypes.LikeRemove)
async def remove_like(event:GroupTypes.LikeRemove):
    await db.removelike(event.object.liker_id)


# –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@bp.on.raw_event(GroupEventType.WALL_REPLY_NEW, dataclass=GroupTypes.WallReplyNew)
async def add_reply(event:GroupTypes.WallReplyNew):
    await db.addcomment(event.object.from_id)


# –ó–∞–±–∏—Ä–∞–µ—Ç –±–∞–ª–ª—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@bp.on.raw_event(GroupEventType.WALL_REPLY_DELETE,dataclass=GroupTypes.WallReplyDelete)
async def remove_reply(event:GroupTypes.WallReplyDelete):
    await db.removecomment(event.object.deleter_id)


async def parser_id(members:List[str]) -> List[int]:
    ''''''
    # https://vk.com/evenifulietome
    # https://vk.com/id457045924
    result=[]
    for member in members:
        member = member.replace("https://vk.com/", "")
        member = (member.split('id')[1]).split('|')[0]
        if member.isdigit():
            result.append(int(member))
        else:
            result.append(int (bp.api.users.users_get(user_ids=member).execute().response.items.id))
    return result   
        

@bp.on.message(text=(f"{PREFIX}–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <members>"))
async def add_score_event(message:Message):
    members = message.text.split(" ")[1:]
    members = await parser_id(members)
    await db.scores_update_event(members)

    # .–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ @id23423542 @dasfgrges https://vk.com/id2344523
    # @dfsdfge -> [id23423542|dasfgrges]


@bp.on.message(text=(f"{PREFIX}–±–∞–ª–ª—ã <score> <members>"))
async def add_score_members(message:Message):
    members = message.text.split(" ")[2:]
    members = await parser_id(members)
    score = int(message.text.split(" ")[1])
    await db.scores_update_members(members, score)




# @bp.on.message(text=['!–±–∞–ª–ª—ã <score> <members>'])
# async def add_scores(message:Message):
# 	try:
# 		score = int(message.text.split(' ')[1])
# 		members = message.text.split(' ')[2].split(',')
# 	except:
# 		await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
# 		return
# 	for member in members:
# 		try:
# 			if 'vk.com' in member:
# 				member = member.split('/')[-1]
# 				id = bp.api.utils.resolve_screen_name(screen_name=member)['object_id']
# 			else:
# 				id = (member.split('id')[1]).split('|')[0]
# 			# print(id)
# 			match score:
# 				case '–º': await scores_update_event(id, True)
# 				case _: await scores_update_event(id, False, score)
# 		except:
# 			await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
# 			return
# 	await message.answer('–ë–∞–ª–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã')


@lw.interval(seconds=15)
async def rating_update():
    widgetRating = {
        "title": "–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ "+datetime.now().strftime("%H:%M"),
        "head": [
            {
                "text": "–£—á–∞—Å—Ç–Ω–∏–∫",
                "align": "left"
            },
            {
                "text": "‚ù§",
                "align": "left"
            },
            {
                "text": "üí¨",
                "align": "left"
            },
            {
                "text": "üéâ",
                "align": "left"
            },
            {
                "text": "–ë–∞–ª–ª—ã",
                "align": "left"
            }
        ],
        "body": [
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(1)))[0].first_name,
                    "icon_id": "id"+str(await db.top_member_count_id(1)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(1)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(1)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(1)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(1))
                }
            ],
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(2)))[0].first_name,
                    "icon_id": "id"+str(await db.top_member_count_id(2)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(2)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(2)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(2)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(2))
                }
            ],
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(3)))[0].first_name,
                    "icon_id": "id"+str(await db.top_member_count_id(3)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(3)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(3)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(3)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(3))
                }
            ],
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(4)))[0].first_name,
                    "icon_id": "id"+str(await db.top_member_count_id(4)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(4)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(4)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(4)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(4))
                }                
            ],
            [
                {
                    "text": (await bp.api.users.get(await db.top_member_count_id(5)))[0].first_name,
                    "icon_id": "id"+str(await db.top_member_count_id(5)),
                },
                {
                    "text": await db.get_quntity_like_user(await db.top_member_count_id(5)),
                },
                {
                    "text": await db.get_quntity_comment_user(await db.top_member_count_id(5)),
                },
                {
                    "text": await db.get_quntity_event_user(await db.top_member_count_id(5)),
                },
                {
                    "text": await db.get_score(await db.top_member_count_id(5))
                }
            ]
        ]
    }
        
    code = f"return {widgetRating};"

    await Bot(widget).api.app_widgets.update(code=code, type='table')


# –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
# –ö–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å 12 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
# lw.interval(60*29)
@lw.interval(seconds=10)
async def event_time_reminder():
    if await db.check_poll_time(datetime.now().timestamp()):
        events = await db.get_events_by_time(datetime.now().timestamp())
        for event in events:
            print_time = datetime.fromtimestamp(event["time"]).strftime('%H:%M %d.%m')
            for member in event['members']:
                await bp.api.messages.send(peer_id=member, message=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ {print_time}", random_id=random.randint(0, 2**64))
            await db.delete_poll(event['_id'])


# @lw.interval(seconds=10)
# async def check_time_polls():
#     time_now = int(datetime.now().timestamp())
#     new_polls = polls.find()
#     async for poll in new_polls:
#         if int(poll['time']) - time_now < 60*60*12:
# 			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
#             members=(await polls.find_one({'_id': poll['_id']}))['members']
#             for member in members:
#                 try:
#                     await bp.api.messages.send(peer_id=member, message='–î–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 12 —á–∞—Å–æ–≤', random_id=0)
#                     await asyncio.sleep(0.5)
#                 except VKAPIError as e:
#                     print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {}'.format(member))
#             # –£–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å
#             await polls.delete_one({'_id': poll['_id']})
#             print('–û–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω')


# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–¥–ø–∏—Å—å—é "–ù–∞—á–∞—Ç—å"
# –í—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"
@bp.on.chat_message(text=['–ù–∞—á–∞—Ç—å'])
async def start_poll(message: Message):
    keyboard=(
            Keyboard(one_time=False)
            .add(Text('–†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π'), {'request_contact': 'allow'}, color=KeyboardButtonColor.POSITIVE)
            )
    await message.answer(
        message="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π",
        keyboard=keyboard.get_json()
    )


# –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π 
@bp.on.private_message(payload={'request_contact':'allow'})
async def allow_send_message(message: Message):
    keyboard=(
        Keyboard(one_time=False)
        .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π'), {'request_contact': 'send'}, color=KeyboardButtonColor.POSITIVE)
        )
    await message.answer(
        message="–í—ã —É—Å–ø–µ—à–Ω–æ –¥–∞–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π",
        keyboard=keyboard.get_json()
    )


@bp.on.private_message(payload={'request_contact':'send'})
async def send_message(message: Message):
    keyboard=(
        Keyboard(one_time=False)
        .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π'), {'request_contact': 'send'}, color=KeyboardButtonColor.POSITIVE)
        )
    await message.answer(
        message="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        keyboard=keyboard.get_json()
    )