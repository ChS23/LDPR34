from vkbottle.bot import Blueprint, Message
from core.DataBaseController import DataBaseController
from core.PermisionRule import PermisionRule
from typing import List
PREFIX="."


bp = Blueprint()
db = DataBaseController()


async def parser_id(members:List[str]) -> List[int]:
    result=[]
    for member in members:
        if member.find("https://vk.com/") != -1: member = member.replace("https://vk.com/", "")
        if member.find("[id") != -1: member = (member.split('id')[1]).split('|')[0]
        if member.isdigit(): result.append(int(member))
        else: result.append(int((await bp.api.users.get(user_ids=member))[0].id))
    return result


async def get_name(id:int) -> str:
    return (await bp.api.users.get(user_ids=id))[0].first_name + " " + (await bp.api.users.get(user_ids=id))[0].last_name


@bp.on.message(PermisionRule(), text=f"{PREFIX}–±–∞–ª–ª—ã <score> <members>")
async def add_score_members(message:Message):
    try:
        members = message.text.split(" ")[2:]
        members = await parser_id(members)
        score = int(message.text.split(" ")[1])
        await db.scores_update_members(members, score)
        await message.answer("–ë–∞–ª–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
        print(e)


@bp.on.message(PermisionRule(), text=f"{PREFIX}–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <count> <members>")
async def add_event_members(message:Message):
    try:
        members = message.text.split(" ")[2:]
        print(members)
        members = await parser_id(members)
        count = int(message.text.split(" ")[1])
        await db.scores_update_event_count(count, members)
        await message.answer("–ë–∞–ª–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –∑–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        print(e)


@bp.on.message(PermisionRule(), text=(f"{PREFIX}—Å–Ω—è—Ç—å <score> <member>"))
async def remove_score_member(message:Message):
    try:
        member = message.text.split(" ")[2:]
        member = (await parser_id(member))[0]
        score = int(message.text.split(" ")[1])
        await db.scores_update(member, -score)
        await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{member} —Å–Ω—è—Ç–æ {score} –±–∞–ª–ª–æ–≤")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –±–∞–ª–ª–æ–≤")
        print(e)


@bp.on.message(PermisionRule(), text=f"{PREFIX}—Ç–æ–ø <count>")
async def get_top(message:Message):
    try:
        count = int(message.text.split(" ")[1])
        members = await db.get_top_members_by_score(count)
        result = ""
        n=1
        for member in members:
            name = await get_name(member['_id'])
            result += ''.join(f'{n}. @id{member["_id"]} ({name}):   {member["scores"]} –±–∞–ª–ª–æ–≤ \n')
            n+=1      
        await message.answer(f"–¢–æ–ø {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{result}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞")
        print(e)


@bp.on.message(text=f"{PREFIX}–∏–Ω—Ñ–æ <member>")
async def get_info(message:Message):
    try:
        member = message.text.split(" ")[1:]
        member = (await parser_id(member))[0]
        name = await get_name(member)
        likes=await db.get_likes_by_id(member)
        comment=await db.get_comments_by_id(member)
        event=await db.get_events_by_id(member)
        scores = await db.get_scores_by_id(member)
        await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @id{member} ({name}):\n‚ù§ –õ–∞–π–∫–æ–≤: {likes}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comment}\nüéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {event}\nüî•–ë–∞–ª–ª–æ–≤: {scores}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        print(e)


@bp.on.message(PermisionRule(), text=f"{PREFIX}–Ω–æ–≤—ã–π–º–µ—Å—è—Ü")
async def new_month(message:Message):
    try:
        await db.reset_members()
        await message.answer("–†–µ–π—Ç–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω. –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ!")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–ª–ª–æ–≤")
        print(e)
